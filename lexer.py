from rply import LexerGenerator


class Lexer():
    def __init__(self):
        self.lg = LexerGenerator()

    def add_tokens(self):
        self.lg.add('FLOAT', '-?\d+\.\d+')
        self.lg.add('INTEGER', '-?\d+')
        self.lg.add('STRING', '(""".*?""")|(".*?")|(\'.*?\')')
        self.lg.add('PRINT', 'auf(?!\w)') # put this before variable which would otherwise match
        self.lg.add('BOOLEAN', "true(?!\w)|false(?!\w)")
        self.lg.add('IF', 'if_wolf(?!\w)')
        self.lg.add('ELSE', 'else_dodik(?!\w)')
        self.lg.add('END', 'end(?!\w)')
        self.lg.add('AND', "and(?!\w)")
        self.lg.add('OR', "or(?!\w)")
        self.lg.add('NOT', "not(?!\w)")
        self.lg.add('LET', 'volchara(?!\w)')
        self.lg.add('FOR', 'for_wolf(?!\w)')
        self.lg.add('WHILE', 'while_wolf(?!\w)')
        self.lg.add('BREAK', 'break_wolf(?!\w)')
        self.lg.add('CONTINUE', 'continue_wolf(?!\w)')
        self.lg.add('MATCH', 'match(?!\w)')
        self.lg.add('ENUM', 'enum(?!\w)')
        self.lg.add('NEW', 'new(?!\w)')
        self.lg.add('RETURN', 'return_chitata(?!\w)')
        self.lg.add('TYPE', 'type(?!\w)')
        self.lg.add('TYPE_ARRAY', 'array(?!\w)')
        self.lg.add('TYPE_DICT', 'dict(?!\w)')
        self.lg.add('TYPE_INTEGER', 'int(?!\w)')
        self.lg.add('TYPE_STRING', 'str(?!\w)')
        self.lg.add('TYPE_FLOAT', 'float(?!\w)')
        self.lg.add('TYPE_CHAR', 'char(?!\w)')
        self.lg.add('TYPE_LONG', 'long(?!\w)')
        self.lg.add('TYPE_DOUBLE', 'double(?!\w)')
        self.lg.add('RECORD', 'record(?!\w)')
        self.lg.add('FUNCTION', 'chitata(?!\w)')
        self.lg.add('LAMBDA', 'fn(?!\w)')
        self.lg.add('PRIVATE', 'priv(?!\w)')
        self.lg.add('MODULE', 'mod(?!\w)')
        self.lg.add('TRAIT', 'trait(?!\w)')
        self.lg.add('IMPLEMENT', 'impl(?!\w)')
        self.lg.add('IMPORT', 'import_ruusia_wolf(?!\w)')
        self.lg.add('SEND', 'send(?!\w)')
        self.lg.add('RECEIVE', 'receive(?!\w)')
        self.lg.add('IDENTIFIER', "[a-zA-Z_][a-zA-Z0-9_]*")
        self.lg.add('PLUS', '\+')
        self.lg.add('==', '==')
        self.lg.add('!=', '!=')
        self.lg.add('>=', '>=')
        self.lg.add('<=', '<=')
        self.lg.add('>', '>')
        self.lg.add('<', '<')
        self.lg.add('=', '=')
        self.lg.add('[', '\[')
        self.lg.add(']', '\]')
        self.lg.add('{', '\{')
        self.lg.add('}', '\}')
        self.lg.add('|', '\|')
        self.lg.add(',', ',')
        self.lg.add('DOT', '\.')
        self.lg.add('COLON', ':')
        self.lg.add('MINUS', '-')
        self.lg.add('MUL', '\*')
        self.lg.add('DIV', '/')
        self.lg.add('MOD', '%')
        self.lg.add('(', '\(')
        self.lg.add(')', '\)')
        self.lg.add('NEWLINE', '\n')

        # ignore whitespace
        self.lg.ignore('[ \t\r\f\v]+')

    def get_lexer(self):
        self.add_tokens()
        return self.lg.build()
